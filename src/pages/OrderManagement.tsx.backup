import { useState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useParams, useNavigate, Link } from 'react-router-dom';eState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardDescription,
  CardFooter,
} from '@/components/ui/card';
import { 
  Package, 
  Edit, 
  Trash2, 
  MoreHorizontal, 
  Search, 
  Plus, 
  FileText, 
  Upload, 
  Loader2, 
  ShoppingCart, 
  Calendar,
  User,
  Clock,
  Download,
  Tag,
  ListFilter,
  ArrowLeft,
  AlertTriangle
} from 'lucide-react';
import OrderForm, { Order } from '@/components/OrderForm';
import ExcelUploader from '@/components/ExcelUploader';
import { toast } from 'sonner';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { orderApi, warehouseApi } from '@/lib/api';
import { useNavigate, useParams, Link } from 'react-router-dom';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

// Define the order data structure based on the DTO
interface TransactionDetailsDTO {
  id: number;
  productId: number;
  productName: string;
  quantity: number;
  price: number;
}

interface OrderDTO {
  id: number;
  orderReference: string;
  clientName: string;
  orderDate: string; // ISO date string format
  orderItems: TransactionDetailsDTO[];
}

// Define the paginated response structure
interface OrderContainer {
  TotalNumberOfElements: number;
  pageElements: OrderDTO[];
}

const OrderManagement = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [formOpen, setFormOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [currentOrder, setCurrentOrder] = useState<Order | undefined>(undefined);
  const [formMode, setFormMode] = useState<'create' | 'edit'>('create');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(1);
  const [totalElements, setTotalElements] = useState(0);
  const [activeTab, setActiveTab] = useState('orders');
  const [warehouseList, setWarehouseList] = useState<string[]>([]);

  const queryClient = useQueryClient();
  const navigate = useNavigate();
  const { orderId } = useParams<{ orderId?: string }>();
  
  // Fetch order data with pagination
  const {
    data: orderData,
    isLoading,
    isError,
    error
  } = useQuery<OrderContainer>({
    queryKey: ['orders', currentPage, pageSize],
    queryFn: async () => {
      const response = await orderApi.getAll(currentPage, pageSize);
      return response.data;
    },
    refetchOnWindowFocus: false
  });
  
  // If we have an orderId parameter, fetch the specific order details
  const {
    data: orderDetails,
    isLoading: isLoadingDetails,
    isError: isErrorDetails
  } = useQuery<OrderDTO>({
    queryKey: ['order', orderId],
    queryFn: async () => {
      const response = await orderApi.getById(Number(orderId));
      return response.data;
    },
    enabled: !!orderId,
    refetchOnWindowFocus: false
  });

  // Handle success and error states
  useEffect(() => {
    if (orderData) {
      setTotalElements(orderData.TotalNumberOfElements || 0);
      setTotalPages(Math.ceil((orderData.TotalNumberOfElements || 0) / pageSize));
    }
  }, [orderData, pageSize]);
  
  useEffect(() => {
    if (isError && error) {
      toast.error(`Failed to fetch order data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }, [isError, error]);

  const handleCreate = () => {
    setFormMode('create');
    setCurrentOrder(undefined);
    setFormOpen(true);
  };

  const handleEdit = (order: Order) => {
    setFormMode('edit');
    setCurrentOrder(order);
    setFormOpen(true);
  };

  const handleDeleteIntent = (order: Order) => {
    setCurrentOrder(order);
    setDeleteDialogOpen(true);
  };

  const handleDelete = () => {
    if (currentOrder && currentOrder.id) {
      deleteOrderMutation.mutate(currentOrder.id, {
        onSuccess: () => {
          toast.success(`Order ${currentOrder.orderNumber} has been deleted`);
          setDeleteDialogOpen(false);
        },
        onError: (error) => {
          toast.error(`Failed to delete order: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      });
    }
  };

  const handleFormSubmit = (order: Order) => {
    if (formMode === 'create') {
      createOrderMutation.mutate(order, {
        onSuccess: () => {
          toast.success(`Order ${order.orderNumber} has been created`);
          setFormOpen(false);
        },
        onError: (error) => {
          toast.error(`Failed to create order: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      });
    } else if (order.id) {
      updateOrderMutation.mutate({ id: order.id, orderData: order }, {
        onSuccess: () => {
          toast.success(`Order ${order.orderNumber} has been updated`);
          setFormOpen(false);
        },
        onError: (error) => {
          toast.error(`Failed to update order: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      });
    }
  };

  const handleUploadSuccess = (data: any[]) => {
    // Create a batch of orders
    const orderPromises = data.map(item => {
      const newOrder = {
        orderNumber: `ORD-${Math.floor(Math.random() * 10000)}`,
        customerName: 'Bulk Import',
        product: item.product,
        quantity: item.quantity,
        warehouse: item.warehouse,
        status: 'PENDING' as const,
        date: new Date().toISOString().split('T')[0],
      };

      return orderApi.create(newOrder);
    });

    // Execute all promises
    Promise.all(orderPromises)
      .then(() => {
        queryClient.invalidateQueries({ queryKey: ['orders'] });
        toast.success(`${data.length} orders have been imported successfully`);
      })
      .catch(error => {
        toast.error(`Failed to import orders: ${error instanceof Error ? error.message : 'Unknown error'}`);
      });
  };

  // Handle page change
  const handlePageChange = (newPage: number) => {
    // Ensure we don't go beyond bounds (keeping as 1-based for consistency)
    const boundedPage = Math.max(1, Math.min(newPage, totalPages));
    
    if (boundedPage !== currentPage) {
      setCurrentPage(boundedPage);
    }
  };

  // Handle page size change
  const handlePageSizeChange = (newSize: number) => {
    // Calculate which item should stay visible after page size change
    const firstItemIndex = (currentPage - 1) * pageSize;
    
    // Calculate new page number to keep the user viewing the same data
    const newPage = Math.floor(firstItemIndex / newSize) + 1;
    
    // Ensure we never set page below 1 (since we use 1-based pagination)
    const safeNewPage = Math.max(1, newPage);
    
    // Recalculate total pages with the new page size
    const newTotalPages = Math.max(1, Math.ceil(totalElements / newSize));
    
    // Update state in the correct order
    setPageSize(newSize);
    setTotalPages(newTotalPages);
    
    // Make sure we don't go beyond the new total pages
    const boundedPage = Math.min(safeNewPage, newTotalPages);
    setCurrentPage(boundedPage);
  };

  // Filter orders based on search term
  const filteredOrders = useMemo(() => {
    if (!orderData || !Array.isArray(orderData.pageElements)) {
      return [];
    }
    
    return orderData.pageElements.filter(order =>
      order.orderReference.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.clientName.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [orderData, searchTerm]);

  // Generate pagination items
  const generatePaginationItems = () => {
    const items = [];
    const maxPagesToShow = 5;
    
    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
    
    // Adjust if we're near the end
    if (endPage - startPage + 1 < maxPagesToShow) {
      startPage = Math.max(1, endPage - maxPagesToShow + 1);
    }
    
    // First page
    if (startPage > 1) {
      items.push(
        <PaginationItem key="first">
          <PaginationLink onClick={() => handlePageChange(1)} isActive={currentPage === 1}>
            1
          </PaginationLink>
        </PaginationItem>
      );
      
      // Add ellipsis if needed
      if (startPage > 2) {
        items.push(
          <PaginationItem key="ellipsis-start">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
    }
    
    // Page numbers
    for (let i = startPage; i <= endPage; i++) {
      items.push(
        <PaginationItem key={i}>
          <PaginationLink onClick={() => handlePageChange(i)} isActive={currentPage === i}>
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    // Last page
    if (endPage < totalPages) {
      // Add ellipsis if needed
      if (endPage < totalPages - 1) {
        items.push(
          <PaginationItem key="ellipsis-end">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
      
      items.push(
        <PaginationItem key="last">
          <PaginationLink onClick={() => handlePageChange(totalPages)} isActive={currentPage === totalPages}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    return items;
  };

  // Check if next/previous buttons should be disabled
  const canGoToPrevious = currentPage > 1;
  const canGoToNext = currentPage < totalPages;

  // Helper functions
  const formatDate = (dateString: string) => {
    try {
      // Try to parse the ISO date string
      const date = new Date(dateString);
      return new Intl.DateTimeFormat('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      }).format(date);
    } catch (error) {
      return dateString;
    }
  };

  const getTotalItems = (order: OrderDTO) => {
    return order.orderItems ? order.orderItems.length : 0;
  };

  const getStatusBadgeClass = (status: Order['status']) => {
    switch (status) {
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800';
      case 'PROCESSING':
        return 'bg-blue-100 text-blue-800';
      case 'COMPLETED':
        return 'bg-green-100 text-green-800';
      case 'CANCELLED':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Modify the orders UI to show orderReference, clientName, orderDate, and item count
  // Update the table structure for the orders listing
  const renderOrdersTable = () => {
    return (
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[80px]">ID</TableHead>
              <TableHead>Reference</TableHead>
              <TableHead>Client</TableHead>
              <TableHead>Date</TableHead>
              <TableHead>Items</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              <TableRow>
                <TableCell colSpan={5} className="h-24 text-center">
                  <div className="flex justify-center items-center">
                    <Loader2 className="h-6 w-6 animate-spin mr-2" />
                    Loading orders...
                  </div>
                </TableCell>
              </TableRow>
            ) : isError ? (
              <TableRow>
                <TableCell colSpan={5} className="h-24 text-center text-red-500">
                  Error loading orders. Please try again.
                </TableCell>
              </TableRow>
            ) : filteredOrders.length > 0 ? (
              filteredOrders.map((order) => (
                <TableRow 
                  key={order.id} 
                  className="cursor-pointer hover:bg-muted/50"
                  onClick={() => navigate(`/orders/${order.id}`)}
                >
                  <TableCell className="font-medium">{order.id}</TableCell>
                  <TableCell>
                    <div className="font-medium text-blue-600 hover:underline">
                      {order.orderReference}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <User className="h-4 w-4 mr-2 text-muted-foreground" />
                      {order.clientName}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                      {formatDate(order.orderDate)}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <Package className="h-4 w-4 mr-2 text-muted-foreground" />
                      {getTotalItems(order)}
                    </div>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} className="h-24 text-center">
                  No orders found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    );
  };

  // If we have an orderId parameter, show the order details view
  if (orderId) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <ShoppingCart className="h-8 w-8 text-primary" />
            <div>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-8 w-8 p-0"
                  onClick={() => navigate('/orders')}
                >
                  <span className="sr-only">Back to orders</span>
                  <ArrowLeft className="h-4 w-4" />
                </Button>
                <h1 className="text-3xl font-bold tracking-tight">
                  Order: {orderDetails?.orderReference || 'Loading...'}
                </h1>
              </div>
              <p className="text-muted-foreground">
                View order details and items
              </p>
            </div>
          </div>
          <Button variant="outline" onClick={() => navigate('/orders')}>
            Back to Orders
          </Button>
        </div>

        {isLoadingDetails ? (
          <Card>
            <CardContent className="pt-6">
              <div className="flex justify-center items-center h-40">
                <Loader2 className="h-8 w-8 animate-spin mr-2" />
                <span>Loading order details...</span>
              </div>
            </CardContent>
          </Card>
        ) : isErrorDetails ? (
          <Card>
            <CardContent className="pt-6">
              <div className="flex justify-center items-center h-40 text-red-500">
                <AlertTriangle className="h-8 w-8 mr-2" />
                <span>Error loading order details. Please try again.</span>
              </div>
            </CardContent>
          </Card>
        ) : orderDetails ? (
          <>
            <div className="grid gap-4 grid-cols-1 md:grid-cols-3">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Order Reference</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{orderDetails.orderReference}</div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Client</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{orderDetails.clientName}</div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Order Date</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{formatDate(orderDetails.orderDate)}</div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Order Items</CardTitle>
                <CardDescription>
                  Products included in this order
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[80px]">ID</TableHead>
                        <TableHead>Product</TableHead>
                        <TableHead>Quantity</TableHead>
                        <TableHead>Price</TableHead>
                        <TableHead>Total</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {orderDetails.orderItems && orderDetails.orderItems.length > 0 ? (
                        orderDetails.orderItems.map((item) => (
                          <TableRow key={item.id}>
                            <TableCell className="font-medium">{item.id}</TableCell>
                            <TableCell>
                              <div className="font-medium">{item.productName}</div>
                              <div className="text-xs text-muted-foreground">ID: {item.productId}</div>
                            </TableCell>
                            <TableCell>{item.quantity}</TableCell>
                            <TableCell>${item.price.toFixed(2)}</TableCell>
                            <TableCell>${(item.quantity * item.price).toFixed(2)}</TableCell>
                          </TableRow>
                        ))
                      ) : (
                        <TableRow>
                          <TableCell colSpan={5} className="h-24 text-center">
                            No items found for this order.
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
              <CardFooter className="border-t px-6 py-4">
                <div className="flex justify-between w-full">
                  <span className="font-semibold">Order Total:</span>
                  <span className="font-bold">
                    ${orderDetails.orderItems.reduce((sum, item) => sum + (item.quantity * item.price), 0).toFixed(2)}
                  </span>
                </div>
              </CardFooter>
            </Card>
          </>
        ) : null}
      </div>
    );
  }

  return (
    <>
      <div className="space-y-6 animate-fade-in">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <ShoppingCart className="h-8 w-8 text-primary" />
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Order Management</h1>
              <p className="text-muted-foreground">
                View and manage customer orders
              </p>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={() => {
              // Create CSV content from filteredOrders
              if (filteredOrders.length === 0) {
                toast.error("No data to export");
                return;
              }
              
              // Create headers
              const headers = ['ID', 'Order Reference', 'Client Name', 'Order Date', 'Items Count'];
              const csvRows = [headers.join(',')];
              
              // Create rows
              filteredOrders.forEach(order => {
                const row = [
                  order.id,
                  `"${order.orderReference.replace(/"/g, '""')}"`, // Escape quotes
                  `"${order.clientName.replace(/"/g, '""')}"`, // Escape quotes
                  order.orderDate,
                  getTotalItems(order)
                ];
                csvRows.push(row.join(','));
              });
              
              // Generate CSV
              const csvContent = csvRows.join('\n');
              
              // Create download
              const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.setAttribute('href', url);
              link.setAttribute('download', `order-data-${new Date().toISOString().slice(0,10)}.csv`);
              link.style.visibility = 'hidden';
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              
              toast.success("Order data exported to CSV");
            }}>
              <Download className="mr-2 h-4 w-4" />
              Export
            </Button>
          </div>
        </div>

        {/* Summary Cards */}
        <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Orders</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalElements.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">
                Across all clients
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Recent Orders</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col">
                <div className="text-3xl font-bold text-blue-600">
                  {filteredOrders.filter(order => {
                    // Filter orders from the last 7 days
                    const orderDate = new Date(order.orderDate);
                    const sevenDaysAgo = new Date();
                    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                    return orderDate >= sevenDaysAgo;
                  }).length}
                </div>
                <p className="text-xs text-muted-foreground">
                  In the last 7 days
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {filteredOrders.reduce((sum, order) => sum + getTotalItems(order), 0).toLocaleString()}
              </div>
              <p className="text-xs text-muted-foreground">
                Products ordered
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Average Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {filteredOrders.length > 0 
                  ? Math.round(filteredOrders.reduce((sum, order) => sum + getTotalItems(order), 0) / filteredOrders.length).toLocaleString() 
                  : 0}
              </div>
              <p className="text-xs text-muted-foreground">
                Items per order
              </p>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <div className="flex justify-between items-center">
              <CardTitle>Orders</CardTitle>
            </div>
            <div className="flex w-full max-w-sm items-center space-x-2 mt-2">
              <div className="relative w-full">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search by order reference or client..."
                  className="w-full pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {renderOrdersTable()}
            
            <div className="flex items-center justify-between mt-4">
              <div className="flex items-center space-x-2">
                <p className="text-sm text-muted-foreground">
                  Showing {filteredOrders.length} of {totalElements} orders
                </p>
                <div className="flex items-center space-x-2">
                  <p className="text-sm text-muted-foreground">Orders per page</p>
                  <Select
                    value={pageSize.toString()}
                    onValueChange={(value) => handlePageSizeChange(parseInt(value))}
                  >
                    <SelectTrigger className="h-8 w-[70px]">
                      <SelectValue placeholder={pageSize.toString()} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="5">5</SelectItem>
                      <SelectItem value="10">10</SelectItem>
                      <SelectItem value="20">20</SelectItem>
                      <SelectItem value="50">50</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <p className="text-sm text-muted-foreground">
                  Page {currentPage} of {totalPages}
                </p>
                
                <div className="flex items-center space-x-1">
                  {/* Previous page button */}
                  <Button 
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage <= 1}
                    className="h-8 w-8 p-0"
                  >
                    <span className="sr-only">Previous page</span>
                    <span>‹</span>
                  </Button>
                  
                  {/* Page number buttons */}
                  {generatePaginationItems()}
                  
                  {/* Next page button */}
                  <Button 
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage >= totalPages}
                    className="h-8 w-8 p-0"
                  >
                    <span className="sr-only">Next page</span>
                    <span>›</span>
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </>
  );
};

export default OrderManagement;
