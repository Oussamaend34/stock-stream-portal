import React, { useState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from '@/components/ui/card';
import { Search, Loader2, Filter, Boxes, BarChart3, Download, AlertTriangle } from 'lucide-react';
import { toast } from 'sonner';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { stockApi, warehouseApi } from '@/lib/api';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';

// Define the stock data structure based on the DTO
interface StockDTO {
  id: number;
  productId: number;
  productName: string;
  warehouseId: number;
  WarehouseCode: string;
  unit: string;
  quantity: number;
}

// Define the paginated response structure
interface StockContainer {
  TotalNumberOfElements: number;
  pageElements: StockDTO[];
}

// Define warehouse structure for dropdown
interface Warehouse {
  id: number;
  code: string;
  name: string;
}

// Define filter types
type FilterType = 'all' | 'warehouse' | 'product';

const StockManagement = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(0); // 0-based for API
  const [pageSize, setPageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(1);
  const [totalElements, setTotalElements] = useState(0);
  const [filterType, setFilterType] = useState<FilterType>('all');
  const [warehouseId, setWarehouseId] = useState<number | null>(null);
  const [productId, setProductId] = useState<number | null>(null);

  const queryClient = useQueryClient();

  // Fetch warehouses for the filter dropdown
  const { data: warehouses } = useQuery({
    queryKey: ['warehouses'],
    queryFn: async () => {
      const response = await warehouseApi.getAll();
      return response.data;
    },
    refetchOnWindowFocus: false
  });

  // Fetch stock data based on the selected filter
  const {
    data: stockData,
    isLoading,
    isError,
    refetch
  } = useQuery<StockContainer>({
    queryKey: ['stocks', filterType, warehouseId, productId, currentPage, pageSize],
    queryFn: async () => {
      let response;
      
      switch (filterType) {
        case 'warehouse':
          if (!warehouseId) throw new Error('Warehouse ID is required for warehouse filter');
          response = await stockApi.getByWarehouse(warehouseId, currentPage, pageSize);
          break;
        case 'product':
          if (!productId) throw new Error('Product ID is required for product filter');
          response = await stockApi.getByProduct(productId, currentPage, pageSize);
          break;
        default:
          response = await stockApi.getAll(currentPage, pageSize);
      }
      
      return response.data;
    },
    onSuccess: (data) => {
      setTotalElements(data.TotalNumberOfElements || 0);
      setTotalPages(Math.ceil((data.TotalNumberOfElements || 0) / pageSize));
    },
    onError: (error) => {
      toast.error(`Failed to fetch stock data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    },
    enabled: filterType === 'all' || 
             (filterType === 'warehouse' && warehouseId !== null) || 
             (filterType === 'product' && productId !== null),
    refetchOnWindowFocus: false
  });

  // Handle page change
  const handlePageChange = (newPage: number) => {
    // Ensure we don't go beyond bounds (convert to 0-based for API)
    const boundedPage = Math.max(0, Math.min(newPage - 1, totalPages - 1));
    
    if (boundedPage !== currentPage) {
      setCurrentPage(boundedPage);
    }
  };

  // Handle page size change
  const handlePageSizeChange = (newSize: number) => {
    // Calculate which item should stay visible after page size change
    const firstItemIndex = currentPage * pageSize;
    
    // Calculate new page number to keep the user viewing the same data
    const newPage = Math.floor(firstItemIndex / newSize);
    
    // Ensure we never set page below 0
    const safeNewPage = Math.max(0, newPage);
    
    // Recalculate total pages with the new page size
    const newTotalPages = Math.max(1, Math.ceil(totalElements / newSize));
    
    // Update state in the correct order
    setPageSize(newSize);
    setTotalPages(newTotalPages);
    
    // Make sure we don't go beyond the new total pages
    const boundedPage = Math.min(safeNewPage, newTotalPages - 1);
    setCurrentPage(boundedPage);
  };

  // Handle filter changes
  const handleFilterChange = (type: FilterType) => {
    setFilterType(type);
    setCurrentPage(0); // Reset to first page when changing filters
  };

  const handleWarehouseFilterChange = (id: string) => {
    setWarehouseId(parseInt(id));
    setFilterType('warehouse');
    setCurrentPage(0);
  };

  const handleProductFilterChange = (id: string) => {
    setProductId(parseInt(id));
    setFilterType('product');
    setCurrentPage(0);
  };

  const handleClearFilters = () => {
    setFilterType('all');
    setWarehouseId(null);
    setProductId(null);
    setCurrentPage(0);
  };

  // Filter stock data based on search term
  const filteredStocks = (stockData?.pageElements || []).filter(stock =>
    stock.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    stock.WarehouseCode.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Generate pagination items
  const generatePaginationItems = () => {
    const items = [];
    const maxPagesToShow = 5;
    const displayCurrentPage = currentPage + 1; // Convert 0-based page to 1-based for display
    const displayTotalPages = totalPages;
    
    let startPage = Math.max(1, displayCurrentPage - Math.floor(maxPagesToShow / 2));
    let endPage = Math.min(displayTotalPages, startPage + maxPagesToShow - 1);
    
    // Adjust if we're near the end
    if (endPage - startPage + 1 < maxPagesToShow) {
      startPage = Math.max(1, endPage - maxPagesToShow + 1);
    }
    
    // First page
    if (startPage > 1) {
      items.push(
        <PaginationItem key="first">
          <PaginationLink onClick={() => handlePageChange(1)} isActive={displayCurrentPage === 1}>
            1
          </PaginationLink>
        </PaginationItem>
      );
      
      // Add ellipsis if needed
      if (startPage > 2) {
        items.push(
          <PaginationItem key="ellipsis-start">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
    }
    
    // Page numbers
    for (let i = startPage; i <= endPage; i++) {
      items.push(
        <PaginationItem key={i}>
          <PaginationLink onClick={() => handlePageChange(i)} isActive={displayCurrentPage === i}>
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    // Last page
    if (endPage < displayTotalPages) {
      // Add ellipsis if needed
      if (endPage < displayTotalPages - 1) {
        items.push(
          <PaginationItem key="ellipsis-end">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
      
      items.push(
        <PaginationItem key="last">
          <PaginationLink onClick={() => handlePageChange(displayTotalPages)} isActive={displayCurrentPage === displayTotalPages}>
            {displayTotalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    return items;
  };

  // Check if next/previous buttons should be disabled
  const canGoToPrevious = currentPage > 0;
  const canGoToNext = currentPage < totalPages - 1;

  return (
    <>
      <div className="space-y-6 animate-fade-in">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Boxes className="h-8 w-8 text-warehouse-600" />
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Stock Management</h1>
              <p className="text-muted-foreground">
                View and manage your inventory across warehouses
              </p>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={() => {
              // Create CSV content from filteredStocks
              if (filteredStocks.length === 0) {
                toast.error("No data to export");
                return;
              }
              
              // Create headers
              const headers = ['ID', 'Product ID', 'Product Name', 'Warehouse ID', 'Warehouse Code', 'Unit', 'Quantity'];
              const csvRows = [headers.join(',')];
              
              // Create rows
              filteredStocks.forEach(stock => {
                const row = [
                  stock.id,
                  stock.productId,
                  `"${stock.productName.replace(/"/g, '""')}"`, // Escape quotes
                  stock.warehouseId,
                  stock.WarehouseCode,
                  stock.unit,
                  stock.quantity
                ];
                csvRows.push(row.join(','));
              });
              
              // Generate CSV
              const csvContent = csvRows.join('\n');
              
              // Create download
              const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.setAttribute('href', url);
              link.setAttribute('download', `stock-data-${new Date().toISOString().slice(0,10)}.csv`);
              link.style.visibility = 'hidden';
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              
              toast.success("Stock data exported to CSV");
            }}>
              <Download className="mr-2 h-4 w-4" />
              Export
            </Button>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline">
                  <Filter className="mr-2 h-4 w-4" />
                  Filter
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80">
                <div className="space-y-4">
                  <h4 className="font-medium">Filter Stock</h4>
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium">By Warehouse</h4>
                    <Select
                      onValueChange={handleWarehouseFilterChange}
                      value={filterType === 'warehouse' && warehouseId ? warehouseId.toString() : undefined}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select Warehouse" />
                      </SelectTrigger>
                      <SelectContent>
                        {warehouses && warehouses.map((warehouse: any) => (
                          <SelectItem key={warehouse.id} value={warehouse.id.toString()}>
                            {warehouse.code} - {warehouse.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium">By Product</h4>
                    <Input
                      type="number"
                      placeholder="Enter Product ID"
                      onChange={(e) => {
                        if (e.target.value) {
                          handleProductFilterChange(e.target.value);
                        }
                      }}
                      value={filterType === 'product' && productId ? productId : ''}
                    />
                  </div>
                  <Button className="w-full" variant="outline" onClick={handleClearFilters}>
                    Clear Filters
                  </Button>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>

        {/* Summary Cards */}
        <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalElements.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">
                Across all warehouses
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Low Stock Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center">
                <div className="text-2xl font-bold">
                  {filteredStocks.filter(stock => stock.quantity <= 10).length}
                </div>
                {filteredStocks.filter(stock => stock.quantity <= 10).length > 0 && (
                  <AlertTriangle className="ml-2 h-4 w-4 text-amber-500" />
                )}
              </div>
              <p className="text-xs text-muted-foreground">
                Items with quantity ≤ 10
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Quantity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {filteredStocks.reduce((sum, stock) => sum + stock.quantity, 0).toLocaleString()}
              </div>
              <p className="text-xs text-muted-foreground">
                Units across all products
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Average Quantity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {filteredStocks.length > 0 
                  ? Math.round(filteredStocks.reduce((sum, stock) => sum + stock.quantity, 0) / filteredStocks.length).toLocaleString() 
                  : 0}
              </div>
              <p className="text-xs text-muted-foreground">
                Units per product
              </p>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle>Inventory</CardTitle>
            <div className="flex w-full max-w-sm items-center space-x-2 mt-2">
              <div className="relative w-full">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search by product or warehouse..."
                  className="w-full pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[80px]">ID</TableHead>
                    <TableHead>Product</TableHead>
                    <TableHead>Warehouse</TableHead>
                    <TableHead>Unit</TableHead>
                    <TableHead>Quantity</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {isLoading ? (
                    <TableRow>
                      <TableCell colSpan={5} className="h-24 text-center">
                        <div className="flex justify-center items-center">
                          <Loader2 className="h-6 w-6 animate-spin mr-2" />
                          Loading stock data...
                        </div>
                      </TableCell>
                    </TableRow>
                  ) : isError ? (
                    <TableRow>
                      <TableCell colSpan={5} className="h-24 text-center text-red-500">
                        Error loading stock data. Please try again.
                      </TableCell>
                    </TableRow>
                  ) : filteredStocks.length > 0 ? (
                    filteredStocks.map((stock) => (
                      <TableRow key={stock.id}>
                        <TableCell className="font-medium">{stock.id}</TableCell>
                        <TableCell>
                          <div className="font-medium">{stock.productName}</div>
                          <div className="text-xs text-muted-foreground">ID: {stock.productId}</div>
                        </TableCell>
                        <TableCell>
                          <div>{stock.WarehouseCode}</div> 
                          <div className="text-xs text-muted-foreground">ID: {stock.warehouseId}</div>
                        </TableCell>
                        <TableCell>{stock.unit}</TableCell>
                        <TableCell>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            stock.quantity <= 10 ? 'bg-red-100 text-red-800' : 
                            stock.quantity <= 30 ? 'bg-amber-100 text-amber-800' : 
                            'bg-green-100 text-green-800'
                          }`}>
                            {stock.quantity}
                          </span>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={5} className="h-24 text-center">
                        No stock data found.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
            
            <div className="flex items-center justify-between mt-4">
              <div className="flex items-center space-x-2">
                <p className="text-sm text-muted-foreground">
                  Showing {filteredStocks.length} of {totalElements} items
                </p>
                <div className="flex items-center space-x-2">
                  <p className="text-sm text-muted-foreground">Items per page</p>
                  <Select
                    value={pageSize.toString()}
                    onValueChange={(value) => handlePageSizeChange(parseInt(value))}
                  >
                    <SelectTrigger className="h-8 w-[70px]">
                      <SelectValue placeholder={pageSize.toString()} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="5">5</SelectItem>
                      <SelectItem value="10">10</SelectItem>
                      <SelectItem value="20">20</SelectItem>
                      <SelectItem value="50">50</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <p className="text-sm text-muted-foreground">
                  Page {currentPage + 1} of {totalPages}
                </p>
                
                <div className="flex items-center space-x-1">
                  {/* Previous page button */}
                  <Button 
                    variant="outline"
                    size="sm"
                    onClick={() => canGoToPrevious ? handlePageChange(currentPage) : null}
                    disabled={!canGoToPrevious}
                    className="h-8 w-8 p-0"
                  >
                    <span className="sr-only">Previous page</span>
                    <span>‹</span>
                  </Button>
                  
                  {/* Page number buttons */}
                  {generatePaginationItems()}
                  
                  {/* Next page button */}
                  <Button 
                    variant="outline"
                    size="sm"
                    onClick={() => canGoToNext ? handlePageChange(currentPage + 2) : null}
                    disabled={!canGoToNext}
                    className="h-8 w-8 p-0"
                  >
                    <span className="sr-only">Next page</span>
                    <span>›</span>
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </>
  );
};

export default StockManagement;
